#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodepop:server');
var https = require('https');
const fs = require('fs');
const cluster = require('cluster');

if(cluster.isMaster){
  // Lo que queremos hacer si soy máster
  // Arrancar clones de mí mismo (forks)

  // Suscripción a eventos
  // Cada vez que arranque un fork (clon)
  cluster.on('listening', (worker, address) => {
    console.log(`Worker ${worker.id} con PID ${worker.process.pid} is now connected to port ${address.port}`);

    // Recibir mensajes de los workers process.send();
    worker.on('message', (message) => {
      console.log('Mensaje: ', message);
    });
  });

  // Cada vez que un fork se caiga
  cluster.on('exit', (worker, code, signal) => {
    console.log(`Worker ${worker.process.pid} exited with error code ${code} and signal ${signal}`);

    console.log('Starting a new worker');
    cluster.fork();
  });

  // Número de cores
  const numCPUs = require('os').cpus().length;

  for(i=0; i<numCPUs; i++){
    // Hace un fork y lo arranca:
    cluster.fork();
  }

}else{
  // Soy un clon, por tanto arranco la aplicación:
  /**
   * Get port from environment and store in Express.
   */
  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  const options = {
      key: fs.readFileSync('./certs/example.com+5-key.pem'),
      cert: fs.readFileSync('./certs/example.com+5.pem')
  }

  var server = https.createServer(options, app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
